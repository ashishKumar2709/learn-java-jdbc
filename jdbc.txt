JDBC (Java DB Connectivity) is API in java that defines how a client may access database(rdbms). 
It provides method for querying and updating data. 
This basically desined for relational databases.

The basic steps in JDBC programming incluudes:

1. Import the package.(java.sql.*)
2. Load JDBC driver and register. 
   JDBC driver depending on which DB is used is loaded eg for mysql diver is com.mysql.jdbc.driver.
   A file is downloaded called mysql connector. 
   Then it is loaded and registered in the project using forName method of class class. 
   eg: class.forName(com.mysql.jdbc.driver) 
3. EStablish Connection. (Interface Connection is instantiated)
4. Create statement or a pre compiled SQL statement object.
    Generally statement is of three types 
    1. statement - A query is excuted with statement object
    2. prepared statement - this used for inbuilt queries
    3. callable statement - this for executing procedural language
5. Execute the SQL quries using the statement object.
6. Process the result of the query as an object.
    The result of the query executed is processed depending on whether it is a fetch or insert
7. Close the connection of db. 
   Get the Object of connection and close it and same with statement object.

eg: code may appear as following(pseudo)
import java.sql.* //step 1
main(){
Class.forName(com.mysql.jdbc.driver) //step2
Connection connect = DriverManager.getConnection("URL", "username", "password") //step3

//As Connection is a Interface to instantiate the connection object we use a method called getConnection.
//getConnection is a static method of DriverManager class. 
//getConnection takes three parameters 
//first is URL for the concerned DB and second and third are username and password to access mysql
//Similarly Statement is interface hence 
//to instatiate it a method called createStatement from Drivermanager class is used.

Statement st = connect.createStatement() //step4

//to execute the query ececuteQuery method is used from the same class.
//if the query is for insert or update or for creating DB structure 
//accordingly diffrent method is used than executeQuery
//this method takes a SQL query as parameter
// to hold the result of the query, a particular interface called ResultSet is used

ResultSet res = st.executeQuery("SELECT * from students")//step5

//finally the res object can be used to access the data of the table fetched
//eg if there are two columns with a int and string type. 
//To access int type col value which is col 1 we can enter res.nextInt(1)
//Similarly to access string type col(2) value we can enter res.nextString(2). this givr values in row 1
//to access the next row values we again have write res.nextInt(1) ot res.nextString(2). 
//Or we can use while loops as following:

while (res.next()){ //step6
    sout(res.nextInt(1)+ " "+ res.nextString(2))
}
}
//finally both the objects needs to be closed
st.close(); //step7
connect.close();

example code 2

import java.sql.*;
public class App {
    public static void main(String[] args) throws Exception {
        String url ="jdbc:mysql://localhost:3306/ashdhja";
        String userName ="root";
        String passString =*************;
        String query = "SELECT * FROM table_one";
        String col_one_data = "row_six";
        int col_two_data = 6666;
        // String query1 = "INSERT INTO table_one(col_one, col_two) VALUES('"+col_one_data+"',"+ col_two_data+")";
        //this way of writing insert query is not practical 
        String query1 = "INSERT INTO table_one(col_one, col_two) VALUES(?,?)";
        Class.forName("com.mysql.cj.jdbc.Driver");
        //forName method will load the class Diver 
        //which will run the static block and register the driver
        Connection connect = DriverManager.getConnection(url, userName, passString);// this methods gives instance of Connection as "Connection" is a class
        Statement st = connect.createStatement();
        PreparedStatement st1 = connect.prepareStatement(query1);
        st1.setString(1, col_one_data); //adding query value for col1
        st1.setInt(2, col_two_data); //adding query value for col2
        //this takes two parameter one is index of the input value in query and second is the value.
        int res1 = st1.executeUpdate(); 
        ResultSet res = st.executeQuery(query); 
        System.out.println("Insert result:" + res1);
        // res.next();//this needs to be written everytime before printing data of next row as it shifts the pointer
        // String table_data =res.getInt(1) + ": "+res.getString(2)+ " | "+ res.getInt(3);
        // System.out.println(table_data);
        // res.next();
        // table_data =res.getInt(1)+ ": "+ res.getString(2)+ " | "+ res.getInt(3);
        // System.out.println(table_data);
        // res.next();
        // table_data =res.getInt(1) + ": "+res.getString(2)+ " | "+ res.getInt(3);
        // System.out.println(table_data);
        while(res.next()){//if there are rows avaialble res.next() will give a true else false
            String table_data =res.getInt(1) + ": "+res.getString(2)+ " | "+ res.getInt(3);
            System.out.println(table_data);
        }
        
        st.close();
        connect.close();
    }
}
